name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  TF_VERSION: "1.6.0"
  ARM_USE_OIDC: true

jobs:
  scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./infra
        run: terraform fmt -check=true -recursive

      - name: Terraform Validate
        working-directory: ./infra
        run: |
          terraform init -backend=false
          terraform validate

      # TODO: Add CodeQL analysis
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v2
      #   with:
      #     languages: python

      # TODO: Add Terraform security scanning
      # - name: Run tfsec
      #   uses: aquasecurity/tfsec-action@v1.0.0
      #   with:
      #     working_directory: ./infra

      # TODO: Add Python linting
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.9'
      
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install flake8 black

      # - name: Lint with flake8
      #   run: flake8 services/ --count --select=E9,F63,F7,F82 --show-source --statistics

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: scan
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Workspace
        working-directory: ./infra
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -var-file=envs/dev/main.tfvars -out=tfplan

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('./infra/tfplan', 'utf8');
            
            const output = `#### Terraform Plan ðŸ“–
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: scan
    environment: dev
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Workspace
        working-directory: ./infra
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -var-file=envs/dev/main.tfvars -auto-approve

      - name: Output Infrastructure Details
        working-directory: ./infra
        run: terraform output

  # Commented out - will be enabled when staging/prod environments are ready
  # terraform-apply-stage:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   needs: terraform-apply-dev
  #   environment: stage
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... similar steps for staging

  # terraform-apply-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   needs: terraform-apply-stage
  #   environment: prod
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     # ... similar steps for production
